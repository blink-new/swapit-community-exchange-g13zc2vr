import { useState, useEffect } from 'react'\nimport { ArrowLeft, Edit, Settings, Star, MapPin, Calendar, Package, Heart, History, Bell, QrCode, LogOut } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { Separator } from '@/components/ui/separator'\nimport { ItemCard } from '@/components/items/ItemCard'\nimport { useToast } from '@/hooks/use-toast'\nimport { blink } from '@/blink/client'\nimport type { Item, Transaction, User } from '@/types'\n\ninterface ProfilePageProps {\n  onBack?: () => void\n  onViewItem: (itemId: string) => void\n}\n\nexport function ProfilePage({ onBack, onViewItem }: ProfilePageProps) {\n  const { toast } = useToast()\n  const [user, setUser] = useState<User | null>(null)\n  const [userItems, setUserItems] = useState<Item[]>([])\n  const [favoriteItems, setFavoriteItems] = useState<Item[]>([])\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n  const [favoriteItemIds, setFavoriteItemIds] = useState<Set<string>>(new Set())\n  const [showEditDialog, setShowEditDialog] = useState(false)\n  const [showQRDialog, setShowQRDialog] = useState(false)\n  const [editForm, setEditForm] = useState({\n    displayName: '',\n    bio: '',\n    location: ''\n  })\n  const [activeTab, setActiveTab] = useState('listings')\n\n  // Mock data\n  useEffect(() => {\n    const mockUser: User = {\n      id: 'current_user',\n      email: 'john.doe@example.com',\n      displayName: 'John Doe',\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150',\n      bio: 'Passionate about sustainable living and community sharing. Love finding new homes for items I no longer need!',\n      location: 'San Francisco, CA',\n      interests: ['Electronics', 'Books', 'Clothing', 'Home & Garden'],\n      onboardingCompleted: true,\n      role: 'user',\n      createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n    setUser(mockUser)\n    setEditForm({\n      displayName: mockUser.displayName,\n      bio: mockUser.bio || '',\n      location: mockUser.location || ''\n    })\n\n    const mockUserItems: Item[] = [\n      {\n        id: 'user_item_1',\n        userId: 'current_user',\n        title: 'Vintage Leather Jacket',\n        description: 'Classic brown leather jacket in excellent condition.',\n        category: 'Clothing',\n        condition: 'good',\n        listingType: 'swap',\n        location: 'San Francisco, CA',\n        images: ['https://images.unsplash.com/photo-1551028719-00167b16eac5?w=400'],\n        isBoosted: true,\n        status: 'available',\n        createdAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        id: 'user_item_2',\n        userId: 'current_user',\n        title: 'Programming Books Collection',\n        description: 'Set of programming books including JavaScript, Python, and React.',\n        category: 'Books',\n        condition: 'good',\n        listingType: 'donation',\n        location: 'San Francisco, CA',\n        images: ['https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=400'],\n        isBoosted: false,\n        status: 'completed',\n        createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        id: 'user_item_3',\n        userId: 'current_user',\n        title: 'Bluetooth Headphones',\n        description: 'Sony WH-1000XM4 noise-canceling headphones.',\n        category: 'Electronics',\n        condition: 'like_new',\n        listingType: 'swap',\n        location: 'San Francisco, CA',\n        images: ['https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=400'],\n        isBoosted: false,\n        status: 'pending',\n        createdAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date().toISOString()\n      }\n    ]\n    setUserItems(mockUserItems)\n\n    const mockFavoriteItems: Item[] = [\n      {\n        id: 'fav_item_1',\n        userId: 'user_2',\n        title: 'Acoustic Guitar',\n        description: 'Yamaha acoustic guitar with case.',\n        category: 'Music',\n        condition: 'good',\n        listingType: 'swap',\n        location: 'Oakland, CA',\n        images: ['https://images.unsplash.com/photo-1510915361894-db8b60106cb1?w=400'],\n        isBoosted: false,\n        status: 'available',\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date().toISOString()\n      },\n      {\n        id: 'fav_item_2',\n        userId: 'user_3',\n        title: 'Indoor Plant Collection',\n        description: 'Various houseplants including pothos and snake plant.',\n        category: 'Home & Garden',\n        condition: 'good',\n        listingType: 'donation',\n        location: 'Berkeley, CA',\n        images: ['https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400'],\n        isBoosted: true,\n        status: 'available',\n        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date().toISOString()\n      }\n    ]\n    setFavoriteItems(mockFavoriteItems)\n    setFavoriteItemIds(new Set(mockFavoriteItems.map(item => item.id)))\n\n    const mockTransactions: Transaction[] = [\n      {\n        id: 'trans_1',\n        itemId: 'user_item_2',\n        requesterId: 'user_4',\n        ownerId: 'current_user',\n        status: 'completed',\n        message: 'Thanks for the books! They\\'ll be very helpful.',\n        createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000).toISOString()\n      },\n      {\n        id: 'trans_2',\n        itemId: 'user_item_3',\n        requesterId: 'user_5',\n        ownerId: 'current_user',\n        offeredItemId: 'other_item_1',\n        status: 'proposed',\n        message: 'I have a gaming keyboard that might interest you.',\n        createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()\n      }\n    ]\n    setTransactions(mockTransactions)\n  }, [])\n\n  const handleEditProfile = async () => {\n    try {\n      // Mock API call\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      if (user) {\n        const updatedUser = {\n          ...user,\n          displayName: editForm.displayName,\n          bio: editForm.bio,\n          location: editForm.location,\n          updatedAt: new Date().toISOString()\n        }\n        setUser(updatedUser)\n      }\n      \n      toast({\n        title: 'Profile updated',\n        description: 'Your profile has been successfully updated.'\n      })\n      \n      setShowEditDialog(false)\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to update profile. Please try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const handleFavorite = (itemId: string) => {\n    setFavoriteItemIds(prev => {\n      const newFavorites = new Set(prev)\n      if (newFavorites.has(itemId)) {\n        newFavorites.delete(itemId)\n        setFavoriteItems(prev => prev.filter(item => item.id !== itemId))\n        toast({\n          title: 'Removed from favorites',\n          description: 'Item removed from your favorites list.'\n        })\n      } else {\n        newFavorites.add(itemId)\n        toast({\n          title: 'Added to favorites',\n          description: 'Item added to your favorites list.'\n        })\n      }\n      return newFavorites\n    })\n  }\n\n  const handleLogout = () => {\n    blink.auth.logout()\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'available': return 'bg-green-100 text-green-800'\n      case 'pending': return 'bg-yellow-100 text-yellow-800'\n      case 'completed': return 'bg-blue-100 text-blue-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const getTransactionStatusColor = (status: string) => {\n    switch (status) {\n      case 'proposed': return 'bg-yellow-100 text-yellow-800'\n      case 'accepted': return 'bg-green-100 text-green-800'\n      case 'rejected': return 'bg-red-100 text-red-800'\n      case 'completed': return 'bg-blue-100 text-blue-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  const stats = {\n    totalListings: userItems.length,\n    activeListings: userItems.filter(item => item.status === 'available').length,\n    completedSwaps: transactions.filter(t => t.status === 'completed').length,\n    favoriteItems: favoriteItems.length\n  }\n\n  if (!user) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-1/4\"></div>\n          <div className=\"h-32 bg-gray-200 rounded\"></div>\n          <div className=\"space-y-3\">\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6\">\n      {/* Header */}\n      {onBack && (\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={onBack}>\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-2xl font-bold\">Profile</h1>\n        </div>\n      )}\n\n      {/* Profile Header */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-6\">\n            <div className=\"flex flex-col items-center md:items-start\">\n              <Avatar className=\"h-24 w-24 mb-4\">\n                <AvatarImage src={user.avatar} />\n                <AvatarFallback className=\"text-2xl\">\n                  {user.displayName.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex gap-2\">\n                <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <Edit className=\"h-4 w-4 mr-2\" />\n                      Edit Profile\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Edit Profile</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"displayName\">Display Name</Label>\n                        <Input\n                          id=\"displayName\"\n                          value={editForm.displayName}\n                          onChange={(e) => setEditForm(prev => ({ ...prev, displayName: e.target.value }))}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"bio\">Bio</Label>\n                        <Textarea\n                          id=\"bio\"\n                          value={editForm.bio}\n                          onChange={(e) => setEditForm(prev => ({ ...prev, bio: e.target.value }))}\n                          rows={3}\n                        />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"location\">Location</Label>\n                        <Input\n                          id=\"location\"\n                          value={editForm.location}\n                          onChange={(e) => setEditForm(prev => ({ ...prev, location: e.target.value }))}\n                        />\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button variant=\"outline\" onClick={() => setShowEditDialog(false)} className=\"flex-1\">\n                          Cancel\n                        </Button>\n                        <Button onClick={handleEditProfile} className=\"flex-1\">\n                          Save Changes\n                        </Button>\n                      </div>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n                \n                <Dialog open={showQRDialog} onOpenChange={setShowQRDialog}>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      <QrCode className=\"h-4 w-4 mr-2\" />\n                      QR Code\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Your Profile QR Code</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"text-center space-y-4\">\n                      <div className=\"w-48 h-48 bg-gray-100 rounded-lg flex items-center justify-center mx-auto\">\n                        <QrCode className=\"h-16 w-16 text-gray-400\" />\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Share this QR code to let others view your profile and items\n                      </p>\n                      <Button variant=\"outline\" className=\"w-full\">\n                        Download QR Code\n                      </Button>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            </div>\n            \n            <div className=\"flex-1\">\n              <div className=\"text-center md:text-left mb-4\">\n                <h2 className=\"text-2xl font-bold mb-2\">{user.displayName}</h2>\n                <div className=\"flex items-center justify-center md:justify-start gap-4 text-sm text-muted-foreground mb-3\">\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-3 w-3\" />\n                    <span>{user.location}</span>\n                  </div>\n                  <div className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    <span>Joined {new Date(user.createdAt).toLocaleDateString()}</span>\n                  </div>\n                </div>\n                <p className=\"text-muted-foreground mb-4\">{user.bio}</p>\n                \n                {/* Interests */}\n                {user.interests && user.interests.length > 0 && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium mb-2\">Interests</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {user.interests.map((interest) => (\n                        <Badge key={interest} variant=\"secondary\">\n                          {interest}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              {/* Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-primary\">{stats.totalListings}</div>\n                  <div className=\"text-sm text-muted-foreground\">Total Listings</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">{stats.activeListings}</div>\n                  <div className=\"text-sm text-muted-foreground\">Active</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{stats.completedSwaps}</div>\n                  <div className=\"text-sm text-muted-foreground\">Completed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-purple-600\">{stats.favoriteItems}</div>\n                  <div className=\"text-sm text-muted-foreground\">Favorites</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"listings\" className=\"flex items-center gap-2\">\n            <Package className=\"h-4 w-4\" />\n            My Listings\n          </TabsTrigger>\n          <TabsTrigger value=\"favorites\" className=\"flex items-center gap-2\">\n            <Heart className=\"h-4 w-4\" />\n            Favorites\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" className=\"flex items-center gap-2\">\n            <History className=\"h-4 w-4\" />\n            History\n          </TabsTrigger>\n          <TabsTrigger value=\"settings\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Settings\n          </TabsTrigger>\n        </TabsList>\n\n        {/* My Listings */}\n        <TabsContent value=\"listings\" className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">My Listings ({userItems.length})</h3>\n            <div className=\"flex gap-2\">\n              <Badge variant=\"outline\">All</Badge>\n              <Badge variant=\"outline\">Available</Badge>\n              <Badge variant=\"outline\">Pending</Badge>\n              <Badge variant=\"outline\">Completed</Badge>\n            </div>\n          </div>\n          \n          {userItems.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {userItems.map((item) => (\n                <div key={item.id} className=\"relative\">\n                  <ItemCard\n                    item={item}\n                    onFavorite={() => {}} // User can't favorite their own items\n                    onViewDetails={onViewItem}\n                    isFavorited={false}\n                  />\n                  <div className=\"absolute top-2 left-2\">\n                    <Badge className={getStatusColor(item.status)} variant=\"secondary\">\n                      {item.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Package className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"font-semibold mb-2\">No listings yet</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Start sharing your unused items with the community\n                </p>\n                <Button>Create Your First Listing</Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Favorites */}\n        <TabsContent value=\"favorites\" className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Favorite Items ({favoriteItems.length})</h3>\n          \n          {favoriteItems.length > 0 ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {favoriteItems.map((item) => (\n                <ItemCard\n                  key={item.id}\n                  item={item}\n                  onFavorite={handleFavorite}\n                  onViewDetails={onViewItem}\n                  isFavorited={favoriteItemIds.has(item.id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Heart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"font-semibold mb-2\">No favorites yet</h3>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  Items you favorite will appear here for easy access\n                </p>\n                <Button variant=\"outline\">Browse Items</Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Transaction History */}\n        <TabsContent value=\"history\" className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Transaction History ({transactions.length})</h3>\n          \n          {transactions.length > 0 ? (\n            <div className=\"space-y-4\">\n              {transactions.map((transaction) => {\n                const item = userItems.find(i => i.id === transaction.itemId)\n                return (\n                  <Card key={transaction.id}>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start gap-4\">\n                        {item && (\n                          <img\n                            src={item.images[0]}\n                            alt={item.title}\n                            className=\"w-16 h-16 object-cover rounded-lg\"\n                          />\n                        )}\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <div>\n                              <h4 className=\"font-medium\">{item?.title || 'Unknown Item'}</h4>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {transaction.offeredItemId ? 'Swap proposal' : 'Donation request'}\n                              </p>\n                            </div>\n                            <Badge className={getTransactionStatusColor(transaction.status)} variant=\"secondary\">\n                              {transaction.status}\n                            </Badge>\n                          </div>\n                          {transaction.message && (\n                            <p className=\"text-sm text-muted-foreground mb-2\">\n                              \"{transaction.message}\"\n                            </p>\n                          )}\n                          <p className=\"text-xs text-muted-foreground\">\n                            {new Date(transaction.createdAt).toLocaleDateString()}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )\n              })}\n            </div>\n          ) : (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <History className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"font-semibold mb-2\">No transaction history</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your swap and donation history will appear here\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Settings */}\n        <TabsContent value=\"settings\" className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Settings</h3>\n          \n          <div className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Bell className=\"h-5 w-5\" />\n                  Notifications\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Email Notifications</p>\n                    <p className=\"text-sm text-muted-foreground\">Receive updates about your items and messages</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">Configure</Button>\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Push Notifications</p>\n                    <p className=\"text-sm text-muted-foreground\">Get notified about new messages and proposals</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">Configure</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Settings className=\"h-5 w-5\" />\n                  Account\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Privacy Settings</p>\n                    <p className=\"text-sm text-muted-foreground\">Control who can see your profile and items</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">Manage</Button>\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Data Export</p>\n                    <p className=\"text-sm text-muted-foreground\">Download your data and activity</p>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">Export</Button>\n                </div>\n                <Separator />\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"font-medium\">Delete Account</p>\n                    <p className=\"text-sm text-muted-foreground\">Permanently delete your account and data</p>\n                  </div>\n                  <Button variant=\"destructive\" size=\"sm\">Delete</Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <Button variant=\"outline\" onClick={handleLogout} className=\"w-full\">\n                  <LogOut className=\"h-4 w-4 mr-2\" />\n                  Sign Out\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}"