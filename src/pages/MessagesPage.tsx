import { useState, useEffect, useRef } from 'react'\nimport { ArrowLeft, Send, Search, MoreVertical, Phone, Video, Info } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Card, CardContent } from '@/components/ui/card'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Badge } from '@/components/ui/badge'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'\nimport { Separator } from '@/components/ui/separator'\nimport { useToast } from '@/hooks/use-toast'\nimport type { Conversation, Message } from '@/types'\n\ninterface MessagesPageProps {\n  onBack?: () => void\n}\n\nexport function MessagesPage({ onBack }: MessagesPageProps) {\n  const { toast } = useToast()\n  const [conversations, setConversations] = useState<Conversation[]>([])\n  const [activeConversation, setActiveConversation] = useState<string | null>(null)\n  const [messages, setMessages] = useState<Message[]>([])\n  const [newMessage, setNewMessage] = useState('')\n  const [searchQuery, setSearchQuery] = useState('')\n  const [isMobile, setIsMobile] = useState(window.innerWidth < 768)\n  const messagesEndRef = useRef<HTMLDivElement>(null)\n\n  // Mock data\n  useEffect(() => {\n    const mockConversations: Conversation[] = [\n      {\n        id: 'conv_1',\n        participants: ['current_user', 'user_1'],\n        lastMessage: {\n          id: 'msg_1',\n          conversationId: 'conv_1',\n          senderId: 'user_1',\n          content: 'Hi! I\\'m interested in your leather jacket. Is it still available?',\n          isRead: false,\n          createdAt: new Date(Date.now() - 30 * 60 * 1000).toISOString()\n        },\n        unreadCount: 2,\n        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date(Date.now() - 30 * 60 * 1000).toISOString()\n      },\n      {\n        id: 'conv_2',\n        participants: ['current_user', 'user_2'],\n        lastMessage: {\n          id: 'msg_2',\n          conversationId: 'conv_2',\n          senderId: 'current_user',\n          content: 'Thanks for the quick response! When would be a good time to meet?',\n          isRead: true,\n          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()\n        },\n        unreadCount: 0,\n        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()\n      },\n      {\n        id: 'conv_3',\n        participants: ['current_user', 'user_3'],\n        lastMessage: {\n          id: 'msg_3',\n          conversationId: 'conv_3',\n          senderId: 'user_3',\n          content: 'Perfect! I\\'ll bring the guitar case as well.',\n          isRead: true,\n          createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString()\n        },\n        unreadCount: 0,\n        createdAt: new Date(Date.now() - 48 * 60 * 60 * 1000).toISOString(),\n        updatedAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString()\n      }\n    ]\n    setConversations(mockConversations)\n  }, [])\n\n  // Mock messages for active conversation\n  useEffect(() => {\n    if (activeConversation) {\n      const mockMessages: Message[] = [\n        {\n          id: 'msg_1',\n          conversationId: activeConversation,\n          senderId: 'user_1',\n          content: 'Hi! I saw your leather jacket listing. Is it still available?',\n          isRead: true,\n          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: 'msg_2',\n          conversationId: activeConversation,\n          senderId: 'current_user',\n          content: 'Yes, it\\'s still available! Are you interested in swapping or do you have any questions about it?',\n          isRead: true,\n          createdAt: new Date(Date.now() - 90 * 60 * 1000).toISOString()\n        },\n        {\n          id: 'msg_3',\n          conversationId: activeConversation,\n          senderId: 'user_1',\n          content: 'I\\'d love to swap! I have a denim jacket that might interest you. Can I send you some photos?',\n          isRead: true,\n          createdAt: new Date(Date.now() - 60 * 60 * 1000).toISOString()\n        },\n        {\n          id: 'msg_4',\n          conversationId: activeConversation,\n          senderId: 'current_user',\n          content: 'That sounds great! Please send the photos and let me know the condition.',\n          isRead: true,\n          createdAt: new Date(Date.now() - 45 * 60 * 1000).toISOString()\n        },\n        {\n          id: 'msg_5',\n          conversationId: activeConversation,\n          senderId: 'user_1',\n          content: 'Hi! I\\'m interested in your leather jacket. Is it still available?',\n          isRead: false,\n          createdAt: new Date(Date.now() - 30 * 60 * 1000).toISOString()\n        }\n      ]\n      setMessages(mockMessages)\n    }\n  }, [activeConversation])\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\n  }, [messages])\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      setIsMobile(window.innerWidth < 768)\n    }\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString)\n    const now = new Date()\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60))\n    \n    if (diffInHours < 1) {\n      const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60))\n      return diffInMinutes < 1 ? 'now' : `${diffInMinutes}m`\n    }\n    if (diffInHours < 24) return `${diffInHours}h`\n    const diffInDays = Math.floor(diffInHours / 24)\n    if (diffInDays < 7) return `${diffInDays}d`\n    return date.toLocaleDateString()\n  }\n\n  const formatMessageTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n  }\n\n  const getUserName = (userId: string) => {\n    const names: { [key: string]: string } = {\n      'user_1': 'Sarah Johnson',\n      'user_2': 'Mike Chen',\n      'user_3': 'Emma Davis',\n      'current_user': 'You'\n    }\n    return names[userId] || 'Unknown User'\n  }\n\n  const getUserAvatar = (userId: string) => {\n    const avatars: { [key: string]: string } = {\n      'user_1': 'https://images.unsplash.com/photo-1494790108755-2616b9c5e8e1?w=100',\n      'user_2': 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100',\n      'user_3': 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=100'\n    }\n    return avatars[userId] || ''\n  }\n\n  const handleSendMessage = async () => {\n    if (!newMessage.trim() || !activeConversation) return\n\n    const message: Message = {\n      id: `msg_${Date.now()}`,\n      conversationId: activeConversation,\n      senderId: 'current_user',\n      content: newMessage,\n      isRead: true,\n      createdAt: new Date().toISOString()\n    }\n\n    setMessages(prev => [...prev, message])\n    setNewMessage('')\n\n    // Update conversation's last message\n    setConversations(prev => prev.map(conv => \n      conv.id === activeConversation \n        ? { ...conv, lastMessage: message, updatedAt: new Date().toISOString() }\n        : conv\n    ))\n\n    // Mock response after a delay\n    setTimeout(() => {\n      const response: Message = {\n        id: `msg_${Date.now() + 1}`,\n        conversationId: activeConversation,\n        senderId: activeConversation === 'conv_1' ? 'user_1' : 'user_2',\n        content: 'Thanks for your message! I\\'ll get back to you soon.',\n        isRead: false,\n        createdAt: new Date().toISOString()\n      }\n      setMessages(prev => [...prev, response])\n    }, 2000)\n  }\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault()\n      handleSendMessage()\n    }\n  }\n\n  const filteredConversations = conversations.filter(conv => {\n    if (!searchQuery) return true\n    const otherUserId = conv.participants.find(p => p !== 'current_user')\n    const userName = getUserName(otherUserId || '')\n    return userName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n           conv.lastMessage?.content.toLowerCase().includes(searchQuery.toLowerCase())\n  })\n\n  const activeConv = conversations.find(c => c.id === activeConversation)\n  const otherUserId = activeConv?.participants.find(p => p !== 'current_user')\n\n  // Mobile view - show conversation list or chat\n  if (isMobile) {\n    if (activeConversation) {\n      return (\n        <div className=\"h-screen flex flex-col\">\n          {/* Mobile Chat Header */}\n          <div className=\"flex items-center gap-3 p-4 border-b bg-background\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={() => setActiveConversation(null)}>\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <Avatar className=\"h-8 w-8\">\n              <AvatarImage src={getUserAvatar(otherUserId || '')} />\n              <AvatarFallback>{getUserName(otherUserId || '').charAt(0)}</AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <p className=\"font-medium\">{getUserName(otherUserId || '')}</p>\n              <p className=\"text-xs text-muted-foreground\">Online</p>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <MoreVertical className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuItem>\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  Call\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Video className=\"h-4 w-4 mr-2\" />\n                  Video Call\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Info className=\"h-4 w-4 mr-2\" />\n                  View Profile\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          {/* Messages */}\n          <ScrollArea className=\"flex-1 p-4\">\n            <div className=\"space-y-4\">\n              {messages.map((message) => (\n                <div\n                  key={message.id}\n                  className={`flex ${message.senderId === 'current_user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div className={`max-w-[80%] ${message.senderId === 'current_user' ? 'order-2' : 'order-1'}`}>\n                    <div\n                      className={`px-3 py-2 rounded-lg ${\n                        message.senderId === 'current_user'\n                          ? 'bg-primary text-primary-foreground'\n                          : 'bg-muted'\n                      }`}\n                    >\n                      <p className=\"text-sm\">{message.content}</p>\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1 px-1\">\n                      {formatMessageTime(message.createdAt)}\n                    </p>\n                  </div>\n                  {message.senderId !== 'current_user' && (\n                    <Avatar className=\"h-6 w-6 order-1 mr-2 mt-1\">\n                      <AvatarImage src={getUserAvatar(message.senderId)} />\n                      <AvatarFallback className=\"text-xs\">\n                        {getUserName(message.senderId).charAt(0)}\n                      </AvatarFallback>\n                    </Avatar>\n                  )}\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          </ScrollArea>\n\n          {/* Message Input */}\n          <div className=\"p-4 border-t bg-background\">\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Type a message...\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                className=\"flex-1\"\n              />\n              <Button onClick={handleSendMessage} disabled={!newMessage.trim()}>\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )\n    }\n\n    // Mobile conversation list\n    return (\n      <div className=\"space-y-4\">\n        {onBack && (\n          <div className=\"flex items-center gap-4\">\n            <Button variant=\"ghost\" size=\"icon\" onClick={onBack}>\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n            <h1 className=\"text-2xl font-bold\">Messages</h1>\n          </div>\n        )}\n        \n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n\n        <div className=\"space-y-2\">\n          {filteredConversations.map((conversation) => {\n            const otherUserId = conversation.participants.find(p => p !== 'current_user')\n            return (\n              <Card\n                key={conversation.id}\n                className=\"cursor-pointer hover:shadow-md transition-shadow\"\n                onClick={() => setActiveConversation(conversation.id)}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar>\n                      <AvatarImage src={getUserAvatar(otherUserId || '')} />\n                      <AvatarFallback>{getUserName(otherUserId || '').charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <p className=\"font-medium\">{getUserName(otherUserId || '')}</p>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatTime(conversation.lastMessage?.createdAt || conversation.updatedAt)}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                        {conversation.lastMessage?.senderId === 'current_user' && 'You: '}\n                        {conversation.lastMessage?.content || 'No messages yet'}\n                      </p>\n                    </div>\n                    {conversation.unreadCount > 0 && (\n                      <Badge className=\"bg-primary text-primary-foreground\">\n                        {conversation.unreadCount}\n                      </Badge>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  // Desktop view\n  return (\n    <div className=\"h-[calc(100vh-200px)] flex border rounded-lg overflow-hidden\">\n      {/* Conversations List */}\n      <div className=\"w-80 border-r flex flex-col\">\n        <div className=\"p-4 border-b\">\n          <h2 className=\"font-semibold mb-3\">Messages</h2>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              placeholder=\"Search conversations...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n        </div>\n        \n        <ScrollArea className=\"flex-1\">\n          <div className=\"p-2\">\n            {filteredConversations.map((conversation) => {\n              const otherUserId = conversation.participants.find(p => p !== 'current_user')\n              const isActive = activeConversation === conversation.id\n              \n              return (\n                <div\n                  key={conversation.id}\n                  className={`p-3 rounded-lg cursor-pointer transition-colors ${\n                    isActive ? 'bg-primary/10' : 'hover:bg-muted/50'\n                  }`}\n                  onClick={() => setActiveConversation(conversation.id)}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarImage src={getUserAvatar(otherUserId || '')} />\n                      <AvatarFallback>{getUserName(otherUserId || '').charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <p className=\"font-medium text-sm\">{getUserName(otherUserId || '')}</p>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatTime(conversation.lastMessage?.createdAt || conversation.updatedAt)}\n                        </span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground line-clamp-1\">\n                        {conversation.lastMessage?.senderId === 'current_user' && 'You: '}\n                        {conversation.lastMessage?.content || 'No messages yet'}\n                      </p>\n                    </div>\n                    {conversation.unreadCount > 0 && (\n                      <Badge className=\"bg-primary text-primary-foreground text-xs\">\n                        {conversation.unreadCount}\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              )\n            })}\n          </div>\n        </ScrollArea>\n      </div>\n\n      {/* Chat Area */}\n      <div className=\"flex-1 flex flex-col\">\n        {activeConversation ? (\n          <>\n            {/* Chat Header */}\n            <div className=\"p-4 border-b flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <Avatar>\n                  <AvatarImage src={getUserAvatar(otherUserId || '')} />\n                  <AvatarFallback>{getUserName(otherUserId || '').charAt(0)}</AvatarFallback>\n                </Avatar>\n                <div>\n                  <p className=\"font-medium\">{getUserName(otherUserId || '')}</p>\n                  <p className=\"text-sm text-muted-foreground\">Online</p>\n                </div>\n              </div>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\">\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem>\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    Call\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Video className=\"h-4 w-4 mr-2\" />\n                    Video Call\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Info className=\"h-4 w-4 mr-2\" />\n                    View Profile\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n\n            {/* Messages */}\n            <ScrollArea className=\"flex-1 p-4\">\n              <div className=\"space-y-4\">\n                {messages.map((message) => (\n                  <div\n                    key={message.id}\n                    className={`flex ${message.senderId === 'current_user' ? 'justify-end' : 'justify-start'}`}\n                  >\n                    <div className={`max-w-[70%] ${message.senderId === 'current_user' ? 'order-2' : 'order-1'}`}>\n                      <div\n                        className={`px-4 py-2 rounded-lg ${\n                          message.senderId === 'current_user'\n                            ? 'bg-primary text-primary-foreground'\n                            : 'bg-muted'\n                        }`}\n                      >\n                        <p className=\"text-sm\">{message.content}</p>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1 px-1\">\n                        {formatMessageTime(message.createdAt)}\n                      </p>\n                    </div>\n                    {message.senderId !== 'current_user' && (\n                      <Avatar className=\"h-8 w-8 order-1 mr-3 mt-1\">\n                        <AvatarImage src={getUserAvatar(message.senderId)} />\n                        <AvatarFallback className=\"text-xs\">\n                          {getUserName(message.senderId).charAt(0)}\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n                  </div>\n                ))}\n                <div ref={messagesEndRef} />\n              </div>\n            </ScrollArea>\n\n            {/* Message Input */}\n            <div className=\"p-4 border-t\">\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Type a message...\"\n                  value={newMessage}\n                  onChange={(e) => setNewMessage(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  className=\"flex-1\"\n                />\n                <Button onClick={handleSendMessage} disabled={!newMessage.trim()}>\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </>\n        ) : (\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"h-16 w-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <MessageCircle className=\"h-8 w-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"font-semibold mb-2\">Select a conversation</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Choose a conversation from the list to start messaging\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}"